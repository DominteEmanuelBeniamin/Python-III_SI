# -*- coding: utf-8 -*-
"""lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rkMj69Ke0Ak3c0U67a-EN7NmzPKRq7qV
"""

import math

class Shape:
    def area(self):
        pass

    def perimeter(self):
        pass

class Circle(Shape):
    def __init__(self, r):
        self.r = r

    def area(self):
        return math.pi * self.r**2

    def perimeter(self):
        return 2 * math.pi * self.r

class Rectangle(Shape):
    def __init__(self, w, h):
        self.w = w
        self.h = h

    def area(self):
        return self.w * self.h

    def perimeter(self):
        return 2 * (self.w + self.h)

class Triangle(Shape):
    def __init__(self, a, b, c, base, height):
        self.a = a
        self.b = b
        self.c = c
        self.base = base
        self.height = height

    def area(self):
        return 0.5 * self.base * self.height

    def perimeter(self):
        return self.a + self.b + self.c

c = Circle(5)
print("Circle area:", c.area(), "Perimeter:", c.perimeter())

r = Rectangle(4, 6)
print("Rectangle area:", r.area(), "Perimeter:", r.perimeter())

t = Triangle(3, 4, 5, 4, 3)
print("Triangle area:", t.area(), "Perimeter:", t.perimeter())

print("\n")

class Account:
    def __init__(self, acc_num, bal=0):
        self.acc_num = acc_num
        self.bal = bal

    def deposit(self, amt):
        self.bal += amt
        print("Deposited", amt, "New balance:", self.bal)

    def withdraw(self, amt):
        if self.bal >= amt:
            self.bal -= amt
            print("Withdrew", amt, "New balance:", self.bal)
        else:
            print("Insufficient funds")

class SavingsAccount(Account):
    def __init__(self, acc_num, bal=0, rate=0.02):
        super().__init__(acc_num, bal)
        self.rate = rate

    def calc_interest(self):
        interest = self.bal * self.rate
        print("Interest:", interest)
        return interest

class CheckingAccount(Account):
    def __init__(self, acc_num, bal=0, overdraft=500):
        super().__init__(acc_num, bal)
        self.overdraft = overdraft

    def withdraw(self, amt):
        if self.bal + self.overdraft >= amt:
            self.bal -= amt
            print("Withdrew", amt, "New balance:", self.bal)
        else:
            print("Overdraft limit exceeded")

s = SavingsAccount(123, 1000)
s.deposit(500)
s.calc_interest()
s.withdraw(200)

c = CheckingAccount(456, 500)
c.withdraw(900)
print("\n")

class Vehicle:
    def __init__(self, make, model, year, mileage=0):
        self.make = make
        self.model = model
        self.year = year
        self.mileage = mileage

    def get_mileage(self):
        return self.mileage

class Car(Vehicle):
    def __init__(self, make, model, year, mileage=0, doors=4):
        super().__init__(make, model, year, mileage)
        self.doors = doors

class Motorcycle(Vehicle):
    def __init__(self, make, model, year, mileage=0, type='Sport'):
        super().__init__(make, model, year, mileage)
        self.type = type

class Truck(Vehicle):
    def __init__(self, make, model, year, mileage=0, towing_capacity=0):
        super().__init__(make, model, year, mileage)
        self.towing_capacity = towing_capacity

    def get_towing_capacity(self):
        return self.towing_capacity

car = Car("Volkswagen", "Golf", 2003, 15000000000)
print("Car mileage:", car.get_mileage())

bike = Motorcycle("Honda", "CBR", 2019, 5000)
print("Motorcycle mileage:", bike.get_mileage())

truck = Truck("Volvo", "Tutuu", 2018, 20000, 13000)
print("Truck towing capacity:", truck.get_towing_capacity())

print("\n")

class Employee:
    def __init__(self, name, id, salary=0):
        self.name = name
        self.id = id
        self.salary = salary

class Manager(Employee):
    def __init__(self, name, id, salary=0, dept=''):
        super().__init__(name, id, salary)
        self.dept = dept

    def manage(self):
        print(self.name, "manages", self.dept)

class Engineer(Employee):
    def __init__(self, name, id, salary=0, field=''):
        super().__init__(name, id, salary)
        self.field = field

    def develop(self):
        print(self.name, "develops in", self.field)

class Salesperson(Employee):
    def __init__(self, name, id, salary=0, rate=0.1):
        super().__init__(name, id, salary)
        self.rate = rate

    def sell(self, amount):
        commission = amount * self.rate
        self.salary += commission
        print(self.name, "sold", amount, "earned", commission)

m = Manager("Mariana", 1, 80000, "HR")
m.manage()

e = Engineer("Vasilica", 2, 70000, "IT")
e.develop()

s = Salesperson("Andrei", 3, 50000)
s.sell(200000)

print("\n")

class Animal:
    def __init__(self, name):
        self.name = name

class Mammal(Animal):
    def feed_milk(self):
        print(self.name, "feeds milk")

class Bird(Animal):
    def lay_eggs(self):
        print(self.name, "lays eggs")

class Fish(Animal):
    def swim(self):
        print(self.name, "swims")

m = Mammal("Vaca")
m.feed_milk()

b = Bird("Gaina")
b.lay_eggs()

f = Fish("Somonu")
f.swim()

print("\n")

class LibraryItem:
    def __init__(self, title, id):
        self.title = title
        self.id = id
        self.checked_out = False

    def check_out(self):
        if not self.checked_out:
            self.checked_out = True
            print(self.title, "checked out")
        else:
            print(self.title, "already checked out")

    def return_item(self):
        if self.checked_out:
            self.checked_out = False
            print(self.title, "returned")
        else:
            print(self.title, "was not checked out")

    def display_info(self):
        print("ID:", self.id, "Title:", self.title)

class Book(LibraryItem):
    def __init__(self, title, id, author, pages):
        super().__init__(title, id)
        self.author = author
        self.pages = pages

    def display_info(self):
        super().display_info()
        print("Author:", self.author, "Pages:", self.pages)

class DVD(LibraryItem):
    def __init__(self, title, id, director, duration):
        super().__init__(title, id)
        self.director = director
        self.duration = duration

    def display_info(self):
        super().display_info()
        print("Director:", self.director, "Duration:", self.duration)

class Magazine(LibraryItem):
    def __init__(self, title, id, issue):
        super().__init__(title, id)
        self.issue = issue

    def display_info(self):
        super().display_info()
        print("Issue:", self.issue)

b = Book("Viata lui Dumnezeu", 1, "Dominte Emanuel", 231)
b.display_info()
b.check_out()
b.return_item()

d = DVD("Viata lui Dominte Emanuel", 2, "Dominte Emanuel", 312)
d.display_info()
d.check_out()

m = Magazine("Viata lui Dominte Emanuel", 3, 312)
m.display_info()
m.return_item()


import sys
import os

def numara_caractere(file_name):
    if not os.path.exists(file_name):
        print("Eroare: fisierul nu exista.")
        return
    
    with open(file_name, 'r') as f:
        text = f.read().lower()
    
    cuvinte = text.split()
    dictionar = {}
    
    for cuv in cuvinte:
        cuv_fara_spec = ''.join(e for e in cuv if e.isalnum())
        caractere_dif = len(set(cuv_fara_spec))
        if cuv_fara_spec not in dictionar:
            dictionar[cuv_fara_spec] = caractere_dif
    
    for cuv, caractere in sorted(dictionar.items()):
        print(f"{cuv} - {caractere}")

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Folosire: script.py <nume_fisier>")
    else:
        numara_caractere(sys.argv[1])
